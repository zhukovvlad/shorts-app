/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * –ó–∞–ø—É—Å–∫: npx tsx scripts/test-migration.ts
 */

import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function testMigration() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n')

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    console.log('1Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î...')
    await prisma.$connect()
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ\n')

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü
    console.log('2Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü...')
    const tables = await prisma.$queryRaw<Array<{ tablename: string }>>`
      SELECT tablename FROM pg_tables 
      WHERE schemaname = 'public'
      ORDER BY tablename
    `
    const tableNames = tables.map(t => t.tablename)
    console.log('–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:', tableNames)
    
    const requiredTables = ['User', 'Account', 'Session', 'VerificationToken', 'Video']
    const missingTables = requiredTables.filter(t => !tableNames.includes(t))
    
    if (missingTables.length > 0) {
      console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü—ã:', missingTables)
      process.exit(1)
    }
    console.log('‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç\n')

    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤
    console.log('3Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤...')
    const indexes = await prisma.$queryRaw<Array<{ indexname: string, tablename: string }>>`
      SELECT indexname, tablename 
      FROM pg_indexes 
      WHERE schemaname = 'public'
      AND tablename IN ('User', 'Account', 'Session', 'VerificationToken')
    `
    console.log('–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã:', indexes.length)
    indexes.forEach(idx => console.log(`  - ${idx.tablename}.${idx.indexname}`))
    console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã\n')

    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ Foreign Keys
    console.log('4Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ Foreign Keys...')
    const fks = await prisma.$queryRaw<Array<{ 
      constraint_name: string, 
      table_name: string,
      column_name: string,
      foreign_table_name: string,
      foreign_column_name: string
    }>>`
      SELECT
        tc.constraint_name,
        tc.table_name,
        kcu.column_name,
        ccu.table_name AS foreign_table_name,
        ccu.column_name AS foreign_column_name
      FROM information_schema.table_constraints AS tc
      JOIN information_schema.key_column_usage AS kcu
        ON tc.constraint_name = kcu.constraint_name
        AND tc.table_schema = kcu.table_schema
      JOIN information_schema.constraint_column_usage AS ccu
        ON ccu.constraint_name = tc.constraint_name
        AND ccu.table_schema = tc.table_schema
      WHERE tc.constraint_type = 'FOREIGN KEY'
        AND tc.table_schema = 'public'
    `
    
    console.log('–ù–∞–π–¥–µ–Ω–Ω—ã–µ FK:', fks.length)
    fks.forEach(fk => {
      console.log(`  - ${fk.table_name}.${fk.column_name} ‚Üí ${fk.foreign_table_name}.${fk.foreign_column_name}`)
    })
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ FK —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    const expectedFKs = [
      { table: 'Account', column: 'userId', refTable: 'User', refColumn: 'id' },
      { table: 'Session', column: 'userId', refTable: 'User', refColumn: 'id' },
      { table: 'Video', column: 'userId', refTable: 'User', refColumn: 'id' },
    ]
    
    for (const expected of expectedFKs) {
      const found = fks.find(fk => 
        fk.table_name === expected.table &&
        fk.column_name === expected.column &&
        fk.foreign_table_name === expected.refTable &&
        fk.foreign_column_name === expected.refColumn
      )
      if (!found) {
        console.error(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç FK: ${expected.table}.${expected.column} ‚Üí ${expected.refTable}.${expected.refColumn}`)
        process.exit(1)
      }
    }
    console.log('‚úÖ –í—Å–µ Foreign Keys –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã\n')

    // 5. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('5Ô∏è‚É£  –¢–µ—Å—Ç CRUD –æ–ø–µ—Ä–∞—Ü–∏–π —Å User...')
    
    // –°–æ–∑–¥–∞–Ω–∏–µ
    const testUser = await prisma.user.create({
      data: {
        id: 'test_' + Date.now(),
        email: `test_${Date.now()}@example.com`,
        name: 'Test User',
        credits: 5,
      }
    })
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ User —Ä–∞–±–æ—Ç–∞–µ—Ç')
    
    // –ß—Ç–µ–Ω–∏–µ
    const foundUser = await prisma.user.findUnique({
      where: { id: testUser.id }
    })
    if (!foundUser) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
      process.exit(1)
    }
    console.log('‚úÖ –ß—Ç–µ–Ω–∏–µ User —Ä–∞–±–æ—Ç–∞–µ—Ç')
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    const updatedUser = await prisma.user.update({
      where: { id: testUser.id },
      data: { credits: 10 }
    })
    if (updatedUser.credits !== 10) {
      console.error('‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–ª–æ—Å—å')
      process.exit(1)
    }
    console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ User —Ä–∞–±–æ—Ç–∞–µ—Ç')
    
    // –£–¥–∞–ª–µ–Ω–∏–µ
    await prisma.user.delete({
      where: { id: testUser.id }
    })
    const deletedUser = await prisma.user.findUnique({
      where: { id: testUser.id }
    })
    if (deletedUser) {
      console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–¥–∞–ª–µ–Ω')
      process.exit(1)
    }
    console.log('‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ User —Ä–∞–±–æ—Ç–∞–µ—Ç\n')

    // 6. –¢–µ—Å—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ email
    console.log('6Ô∏è‚É£  –¢–µ—Å—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ email...')
    const user1 = await prisma.user.create({
      data: {
        id: 'test1_' + Date.now(),
        email: 'unique_test@example.com',
      }
    })
    
    try {
      await prisma.user.create({
        data: {
          id: 'test2_' + Date.now(),
          email: 'unique_test@example.com', // –î—É–±–ª–∏–∫–∞—Ç
        }
      })
      console.error('‚ùå –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å email –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!')
      process.exit(1)
    } catch (error: any) {
      if (error.code === 'P2002') {
        console.log('‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å email —Ä–∞–±–æ—Ç–∞–µ—Ç')
      } else {
        throw error
      }
    }
    
    // Cleanup
    await prisma.user.delete({ where: { id: user1.id } })
    console.log('')

    // 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ userId —É–¥–∞–ª–µ–Ω–æ
    console.log('7Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ userId —É–¥–∞–ª–µ–Ω–æ...')
    const columns = await prisma.$queryRaw<Array<{ column_name: string }>>`
      SELECT column_name 
      FROM information_schema.columns 
      WHERE table_name = 'User' AND table_schema = 'public'
    `
    const columnNames = columns.map(c => c.column_name)
    
    if (columnNames.includes('userId')) {
      console.error('‚ùå –°—Ç–∞—Ä–æ–µ –ø–æ–ª–µ userId –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')
      process.exit(1)
    }
    console.log('‚úÖ –°—Ç–∞—Ä–æ–µ –ø–æ–ª–µ userId —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ\n')

    // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞
    console.log('‚ïê'.repeat(50))
    console.log('üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!')
    console.log('‚ïê'.repeat(50))
    console.log('\n–ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:')
    console.log('‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã')
    console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã')
    console.log('‚úÖ Foreign Keys —Ä–∞–±–æ—Ç–∞—é—Ç')
    console.log('‚úÖ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç')
    console.log('‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã')
    console.log('‚úÖ –°—Ç–∞—Ä—ã–µ –ø–æ–ª—è —É–¥–∞–ª–µ–Ω—ã')
    console.log('\nüöÄ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!\n')

  } catch (error) {
    console.error('\n‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –ü–†–û–í–ï–†–ö–ï:', error)
    process.exit(1)
  } finally {
    await prisma.$disconnect()
  }
}

// –ó–∞–ø—É—Å–∫
testMigration()
