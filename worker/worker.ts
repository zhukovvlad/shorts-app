import Redis from "ioredis";
import { Worker, Job } from "bullmq";
import { processVideo } from "@/app/actions/processes";
import { prisma } from "@/app/lib/db";
import { setVideoProgress, deleteVideoProgress, testRedisConnection, getVideoCheckpoint, getNextStep, setRedisInstance } from "@/lib/redis";
import { createRedisConfig, validateRedisConfig } from "@/lib/redis-config";

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, —Å—Ç–æ–∏—Ç –ª–∏ –¥–µ–ª–∞—Ç—å —Ä–µ—Ç—Ä–∞–π
function isRetryableError(error: unknown): boolean {
    if (!(error instanceof Error)) return false;
    
    const message = error.message.toLowerCase();
    
    // –û—à–∏–±–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
    const retryableErrors = [
        'fetch failed',
        'connect timeout',
        'econnreset',
        'enotfound',
        'timeout',
        'network error',
        'connection refused',
        'temporary failure',
        'service unavailable',
        'internal server error'
    ];
    
    return retryableErrors.some(retryableError => message.includes(retryableError));
}

// –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
console.log('Environment variables check:');
console.log('TIMEWEB_REDIS_HOST:', process.env.TIMEWEB_REDIS_HOST);
console.log('TIMEWEB_REDIS_PORT:', process.env.TIMEWEB_REDIS_PORT);
console.log('TIMEWEB_REDIS_USERNAME:', process.env.TIMEWEB_REDIS_USERNAME ? '[SET]' : '[NOT SET]');
console.log('TIMEWEB_REDIS_PASSWORD:', process.env.TIMEWEB_REDIS_PASSWORD ? '[SET]' : '[NOT SET]');

// –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Redis –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
validateRedisConfig();

const connection = new Redis(createRedisConfig())

// ‚úÖ –í–ê–ñ–ù–û: –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö Redis –æ–ø–µ—Ä–∞—Ü–∏–π
// –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ Redis
setRedisInstance(connection);

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –¥–ª—è –≤–æ—Ä–∫–µ—Ä–∞
connection.on('error', (err) => {
    console.error('Worker Redis connection error:', err);
});

connection.on('connect', () => {
    console.log('Worker Redis connected successfully');
});

const worker = new Worker('video-processing', async (job: Job) => {
    const { videoId } = job.data;
    
    // –ü–æ–ª—É—á–∞–µ–º checkpoint –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    const checkpoint = await getVideoCheckpoint(videoId);
    const nextStep = getNextStep(checkpoint);
    
    if (checkpoint) {
        console.log(`üîÑ Resuming job for videoId: ${videoId} from step: ${nextStep}`);
        console.log(`üìä Checkpoint state:`, {
            completed: Object.entries(checkpoint.completedSteps)
                .filter(([_, completed]) => completed)
                .map(([step, _]) => step),
            lastCompleted: checkpoint.lastCompletedStep,
            lastFailed: checkpoint.lastFailedStep
        });
        
        if (checkpoint.lastFailedStep) {
            console.log(`‚ö†Ô∏è Previous failure detected at step: ${checkpoint.lastFailedStep}`);
            console.log(`‚úÖ Skipping already completed steps, resuming from: ${nextStep}`);
        }
    } else {
        console.log(`üÜï Starting new job for videoId: ${videoId}`);
    }

    // –ü–æ–ª—É—á–∞–µ–º userId –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const video = await prisma.video.findUnique({
        where: { videoId },
        select: { userId: true }
    });

    if (!video) {
        throw new Error(`Video with ID ${videoId} not found`);
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∏
    const attemptsMade = job.attemptsMade || 0;
    const maxAttempts = 3; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫

    // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (attemptsMade > 0) {
        const stepToRetry = nextStep !== 'completed' ? nextStep : (checkpoint?.lastFailedStep || 'unknown');
        console.log(`üîÑ Retry attempt ${attemptsMade} for videoId: ${videoId}, step: ${stepToRetry}`);
        
        await setVideoProgress(videoId, {
            status: 'retrying',
            step: `–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ ${attemptsMade}/${maxAttempts} (—à–∞–≥: ${stepToRetry})...`,
            retryCount: attemptsMade,
            maxRetries: maxAttempts,
            retryReason: `–í–æ–∑–Ω–∏–∫–ª–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ "${stepToRetry}", –ø—ã—Ç–∞–µ–º—Å—è —Å–Ω–æ–≤–∞`,
            currentStepId: stepToRetry, // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–∞–≥–µ
            timestamp: Date.now(),
            userId: video.userId
        }).catch(err => console.warn('Redis retry notification failed:', err));

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
        await new Promise(resolve => setTimeout(resolve, 2000 * attemptsMade));
    }

    try {
        await processVideo(videoId, video.userId);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        await setVideoProgress(videoId, {
            status: 'completed',
            timestamp: Date.now(),
            userId: video.userId
        }).catch(err => console.warn('Redis progress update failed:', err));

        // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥ - –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ Redis –∑–∞–ø—Ä–æ—Å–æ–≤
        // TTL –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç —á–µ—Ä–µ–∑ 1 —á–∞—Å (VIDEO_PROGRESS_TTL)
        // setTimeout(() => {
        //     deleteVideoProgress(videoId).catch(err => 
        //         console.warn('Redis progress cleanup failed:', err)
        //     );
        // }, 30000);

        console.log(`Completed processing for videoId: ${videoId}`);
    } catch (error) {
        console.error(`‚ùå Error processing videoId ${videoId}:`, error);

        // –ü–æ–ª—É—á–∞–µ–º checkpoint –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ —à–∞–≥–∞
        const checkpoint = await getVideoCheckpoint(videoId);
        const failedStep = getNextStep(checkpoint);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å—Ç–æ–∏—Ç –ª–∏ –¥–µ–ª–∞—Ç—å —Ä–µ—Ç—Ä–∞–π
        const attemptNumber = attemptsMade + 1;
        const shouldRetry = attemptNumber < maxAttempts && isRetryableError(error);
        
        if (shouldRetry) {
            console.log(`üîÑ Will retry from step: ${failedStep} (attempt ${attemptNumber}/${maxAttempts})`);
        } else {
            console.log(`üõë Final failure at step: ${failedStep} (no more retries)`);
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π video –∏–∑ –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤—ã—à–µ
        if (video) {
            const errorMessage = error instanceof Error ? error.message : 'Unknown error';
            let userFriendlyError = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞';
            
            if (errorMessage.includes('fetch failed') || errorMessage.includes('Connect Timeout')) {
                userFriendlyError = '–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –≤–Ω–µ—à–Ω–∏–º —Å–µ—Ä–≤–∏—Å–∞–º';
            } else if (errorMessage.includes('API') || errorMessage.includes('assemblyai')) {
                userFriendlyError = '–í—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞ —Å—É–±—Ç–∏—Ç—Ä–æ–≤';
            } else if (errorMessage.includes('S3') || errorMessage.includes('upload')) {
                userFriendlyError = '–ü—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π —Ñ–∞–π–ª–æ–≤';
            }

            await setVideoProgress(videoId, {
                status: shouldRetry ? 'error' : 'error',
                error: shouldRetry ? 
                    `${userFriendlyError} –Ω–∞ —à–∞–≥–µ "${failedStep}". –ü–æ–ø—ã—Ç–∫–∞ ${attemptNumber} –∏–∑ ${maxAttempts}` : 
                    `${userFriendlyError} –Ω–∞ —à–∞–≥–µ "${failedStep}"`,
                retryCount: shouldRetry ? attemptNumber : undefined,
                maxRetries: shouldRetry ? maxAttempts : undefined,
                lastError: errorMessage,
                timestamp: Date.now(),
                userId: video.userId
            }).catch(err => console.warn('Redis error update failed:', err));
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ë–î —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞
        if (!shouldRetry) {
            await prisma.video.update({
                where: { videoId },
                data: {
                    processing: false,
                    failed: true,
                }
            });
        }

        throw error;
    }
}, { 
    connection, 
    concurrency: 2
});

worker.on('completed', (job) => {
    console.log(`Job with videoId ${job?.id} has been completed`);
})

worker.on('failed', (job, err) => {
    console.log(`Job with videoId ${job?.id} has failed with error: ${err.message}`);
})

worker.on('error', (err) => {
    console.log('Worker error:', err);
})

console.log('Worker started, waiting for jobs - version 2')
console.log('Connected to redis')

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
testRedisConnection().then(success => {
  if (success) {
    console.log('Redis progress tracking is ready');
  } else {
    console.warn('Redis progress tracking is unavailable, but worker will continue');
  }
});

// Graceful shutdown - –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
const gracefulShutdown = async (signal: string) => {
  console.log(`\n${signal} received, closing worker gracefully...`);
  
  try {
    await worker.close();
    console.log('Worker closed successfully');
    
    await connection.quit();
    console.log('Redis connection closed successfully');
    
    process.exit(0);
  } catch (error) {
    console.error('Error during graceful shutdown:', error);
    process.exit(1);
  }
};

process.on('SIGINT', () => gracefulShutdown('SIGINT'));
process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));