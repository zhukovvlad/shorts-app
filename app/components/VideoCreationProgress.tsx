"use client";

import { CheckCircle, Clock, Loader2, RotateCcw } from "lucide-react";
import { cn } from "@/lib/utils";

interface ProgressStep {
  id: string;
  name: string;
  description: string;
  status: 'pending' | 'current' | 'completed' | 'error';
  estimatedTime?: string;
}

interface VideoCreationProgressProps {
  currentStep: string;
  step?: string;
  error?: string;
  retryCount?: number;
  maxRetries?: number;
  lastError?: string;
  retryReason?: string;
  currentStepId?: string;
  completedSteps?: {
    script: boolean;
    images: boolean;
    audio: boolean;
    captions: boolean;
    render: boolean;
  };
  className?: string;
}

const defaultSteps: ProgressStep[] = [
  {
    id: 'script',
    name: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è',
    description: 'AI –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à –ø—Ä–æ–º–ø—Ç –∏ —Å–æ–∑–¥–∞–µ—Ç —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π',
    estimatedTime: '10-15 —Å–µ–∫',
    status: 'pending'
  },
  {
    id: 'images', 
    name: '–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
    description: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω—ã',
    estimatedTime: '30-45 —Å–µ–∫',
    status: 'pending'
  },
  {
    id: 'audio',
    name: '–°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏',
    description: '–°–æ–∑–¥–∞–Ω–∏–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è',
    estimatedTime: '15-20 —Å–µ–∫',
    status: 'pending'
  },
  {
    id: 'captions',
    name: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤',
    description: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—É–±—Ç–∏—Ç—Ä–æ–≤',
    estimatedTime: '5-10 —Å–µ–∫',
    status: 'pending'
  },
  {
    id: 'render',
    name: '–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤–∏–¥–µ–æ',
    description: '–§–∏–Ω–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –≥–æ—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ',
    estimatedTime: '60-90 —Å–µ–∫',
    status: 'pending'
  }
];

export const VideoCreationProgress = ({ 
  currentStep, 
  step,
  error,
  retryCount,
  maxRetries,
  lastError,
  retryReason,
  currentStepId,
  completedSteps,
  className 
}: VideoCreationProgressProps) => {
  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º currentStep –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  const normalizeCurrentStep = (status: string, currentStepId?: string, retryCount?: number): string => {
    // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å —Ç–æ—á–Ω—ã–π stepId, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if (currentStepId && defaultSteps.some(s => s.id === currentStepId)) {
      return currentStepId;
    }

    if (status === 'retrying') {
      // –ü—Ä–∏ —Ä–µ—Ç—Ä–∞–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —à–∞–≥ –∏–∑ step –æ–ø–∏—Å–∞–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π
      // –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–≥–∞ –≤ step —Å—Ç—Ä–æ–∫–µ
      const stepMatch = step?.match(/(script|images|audio|captions|render)/i);
      if (stepMatch) {
        return stepMatch[1].toLowerCase();
      }
      // Fallback: –µ—Å–ª–∏ —Ä–µ—Ç—Ä–∞–π, —Ç–æ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —ç—Ç–æ captions (—á–∞—Å—Ç–∞—è –æ—à–∏–±–∫–∞)
      return 'captions';
    }
    
    if (status === 'completed') {
      return 'render'; // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π render
    }
    
    if (status === 'error' && retryCount) {
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å —Ä–µ—Ç—Ä–∞–µ–º –ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—ã–π —à–∞–≥
      const stepMatch = step?.match(/(script|images|audio|captions|render)/i);
      if (stepMatch) {
        return stepMatch[1].toLowerCase();
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ currentStep —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º —à–∞–≥–æ–º
    if (defaultSteps.some(s => s.id === status)) {
      return status;
    }
    
    // Fallback –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
    return 'script';
  };

  const activeStepId = normalizeCurrentStep(currentStep, currentStepId, retryCount);
  const isRetrying = currentStep === 'retrying';
  const isCompleted = currentStep === 'completed';
  const isErrorWithRetry = currentStep === 'error' && retryCount;

  // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –≤ production)
  if (process.env.NODE_ENV === 'development') {
    console.log('üé® VideoCreationProgress:', {
      currentStep,
      activeStepId,
      hasCompletedSteps: !!completedSteps,
      completedCount: completedSteps ? Object.values(completedSteps).filter(Boolean).length : 0
    });
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã —à–∞–≥–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç–∏
  const steps = defaultSteps.map((step, index) => {
    const stepIndex = defaultSteps.findIndex(s => s.id === step.id);
    const activeIndex = defaultSteps.findIndex(s => s.id === activeStepId);
    
    if (isCompleted) {
      // –ï—Å–ª–∏ –≤—Å—ë –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –≤—Å–µ —à–∞–≥–∏ completed
      return { ...step, status: 'completed' as const };
    } else if (error && step.id === activeStepId && !retryCount) {
      // –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –±–µ–∑ —Ä–µ—Ç—Ä–∞—è
      return { ...step, status: 'error' as const };
    } else if ((isRetrying || isErrorWithRetry) && step.id === activeStepId) {
      // –¢–µ–∫—É—â–∏–π —à–∞–≥ –ø—Ä–∏ —Ä–µ—Ç—Ä–∞–µ –∏–ª–∏ –æ—à–∏–±–∫–µ —Å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–º —Ä–µ—Ç—Ä–∞–µ–º
      return { ...step, status: 'current' as const };
    } else if (step.id === activeStepId) {
      // –¢–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —à–∞–≥
      return { ...step, status: 'current' as const };
    } else if (completedSteps) {
      // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ checkpoint, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
      if (completedSteps[step.id as keyof typeof completedSteps]) {
        return { ...step, status: 'completed' as const };
      } else if (stepIndex < activeIndex) {
        // –í–ê–ñ–ù–û: –ï—Å–ª–∏ –º—ã –Ω–∞ –±–æ–ª–µ–µ –ø–æ–∑–¥–Ω–µ–º —à–∞–≥–µ, –Ω–æ checkpoint –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω,
        // –ª–æ–≥–∏—á–µ—Å–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —à–∞–≥–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω—ã
        return { ...step, status: 'completed' as const };
      } else {
        // –®–∞–≥ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω —Å–æ–≥–ª–∞—Å–Ω–æ checkpoint –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ
        return { ...step, status: 'pending' as const };
      }
    } else if (stepIndex < activeIndex) {
      // Fallback –¢–û–õ–¨–ö–û –µ—Å–ª–∏ completedSteps –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç:
      // —à–∞–≥–∏ –¥–æ —Ç–µ–∫—É—â–µ–≥–æ —Å—á–∏—Ç–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º–∏
      return { ...step, status: 'completed' as const };
    } else {
      // –ë—É–¥—É—â–∏–µ —à–∞–≥–∏
      return { ...step, status: 'pending' as const };
    }
  });

  // –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –≤ development)
  if (process.env.NODE_ENV === 'development') {
    const completedCount = steps.filter(step => step.status === 'completed').length;
    console.log(`üìä Steps: ${completedCount} completed, active: ${activeStepId}`);
  }

  // –î–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ —É—á–∏—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  let completedStepsCount = steps.filter(step => step.status === 'completed').length;
  
  if (isCompleted) {
    completedStepsCount = steps.length; // 100% –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
  } else if (isRetrying || isErrorWithRetry) {
    // –ü—Ä–∏ —Ä–µ—Ç—Ä–∞–µ –¥–æ–±–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
    const activeIndex = defaultSteps.findIndex(s => s.id === activeStepId);
    completedStepsCount = activeIndex; // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —à–∞–≥–æ–≤ –¥–æ —Ç–µ–∫—É—â–µ–≥–æ
  } else {
    // –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞ –¥–æ–±–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å (50% –æ—Ç —à–∞–≥–∞)
    const activeIndex = defaultSteps.findIndex(s => s.id === activeStepId);
    const currentStepStatus = steps.find(s => s.id === activeStepId)?.status;
    if (currentStepStatus === 'current' && activeIndex >= 0) {
      // –î–æ–±–∞–≤–ª—è–µ–º 0.5 –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º —à–∞–≥–∞–º –¥–ª—è –ø–æ–∫–∞–∑–∞ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
      completedStepsCount = completedStepsCount + 0.5;
    }
  }

  const currentStepData = steps.find(step => step.id === activeStepId);
  const totalSteps = steps.length;
  const progressPercentage = Math.round((completedStepsCount / totalSteps) * 100);

  return (
    <div className={cn("w-full max-w-2xl mx-auto p-6 bg-gray-800/50 rounded-xl border border-gray-700", className)}>
      {/* Header */}
      <div className="text-center mb-6">
        <h3 className="text-xl font-semibold text-white mb-2">
          –°–æ–∑–¥–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≤–∏–¥–µ–æ
        </h3>
        {error && !retryCount ? (
          <p className="text-red-400 text-sm">–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error}</p>
        ) : retryCount ? (
          <div className="space-y-1">
            <p className="text-yellow-400 text-sm font-medium">
              –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {retryCount}/{maxRetries ?? 3}
            </p>
            <p className="text-gray-300 text-xs">
              {retryReason || '–í–æ–∑–Ω–∏–∫–ª–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞, –ø—ã—Ç–∞–µ–º—Å—è —Å–Ω–æ–≤–∞...'}
            </p>
            {lastError && (
              <p className="text-gray-400 text-xs">
                –ü—Ä–µ–¥—ã–¥—É—â–∞—è –æ—à–∏–±–∫–∞: {lastError.length > 100 ? lastError.substring(0, 100) + '...' : lastError}
              </p>
            )}
          </div>
        ) : (
          <p className="text-gray-300 text-sm">
            {step || (currentStepData ? `${currentStepData.name}...` : '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...')}
          </p>
        )}
      </div>

      {/* Progress Bar */}
      <div className="mb-8">
        <div className="flex justify-between items-center mb-2">
          <span className="text-sm text-gray-400">–ü—Ä–æ–≥—Ä–µ—Å—Å</span>
          <span className="text-sm text-gray-400">{progressPercentage}%</span>
        </div>
        <div className="w-full bg-gray-700 rounded-full h-2">
          <div 
            className="bg-gradient-to-r from-[#3352CC] to-[#1C2D70] h-2 rounded-full transition-all duration-500 ease-out"
            style={{ width: `${progressPercentage}%` }}
          />
        </div>
      </div>

      {/* Steps */}
      <div className="space-y-4">
        {steps.map((step) => {
          const isRetrying = retryCount && step.status === 'current';
          const Icon = step.status === 'completed' 
            ? CheckCircle 
            : isRetrying
              ? RotateCcw
            : step.status === 'current' 
              ? Loader2 
              : step.status === 'error'
                ? CheckCircle  // –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ ErrorIcon –µ—Å–ª–∏ –µ—Å—Ç—å
                : Clock;

          return (
            <div 
              key={step.id}
              className={cn(
                "flex items-start gap-4 p-4 rounded-lg transition-all duration-300",
                step.status === 'current' && !isRetrying && "bg-blue-500/10 border border-blue-500/20",
                step.status === 'current' && isRetrying && "bg-yellow-500/10 border border-yellow-500/20",
                step.status === 'completed' && "bg-green-500/10 border border-green-500/20",
                step.status === 'error' && "bg-red-500/10 border border-red-500/20",
                step.status === 'pending' && "bg-gray-700/30"
              )}
            >
              {/* Icon */}
              <div className={cn(
                "flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center",
                step.status === 'completed' && "bg-green-500 text-white",
                step.status === 'current' && !isRetrying && "bg-blue-500 text-white",
                step.status === 'current' && isRetrying && "bg-yellow-500 text-white",
                step.status === 'error' && "bg-red-500 text-white", 
                step.status === 'pending' && "bg-gray-600 text-gray-300"
              )}>
                <Icon 
                  className={cn(
                    "h-4 w-4",
                    step.status === 'current' && !isRetrying && "animate-spin",
                    isRetrying && "animate-spin"
                  )} 
                />
              </div>

              {/* Content */}
              <div className="flex-1 min-w-0">
                <div className="flex items-center justify-between mb-1">
                  <h4 className={cn(
                    "font-medium",
                    step.status === 'completed' && "text-green-400",
                    step.status === 'current' && !isRetrying && "text-blue-400",
                    step.status === 'current' && isRetrying && "text-yellow-400",
                    step.status === 'error' && "text-red-400",
                    step.status === 'pending' && "text-gray-400"
                  )}>
                    {step.name}
                    {isRetrying && (
                      <span className="ml-2 text-xs text-yellow-300">
                        (–ø–æ–≤—Ç–æ—Ä {retryCount}/{maxRetries ?? 3})
                      </span>
                    )}
                  </h4>
                  {step.estimatedTime && step.status === 'current' && (
                    <span className="text-xs text-gray-400 bg-gray-700 px-2 py-1 rounded">
                      ~{step.estimatedTime}
                    </span>
                  )}
                </div>
                <p className="text-sm text-gray-500">
                  {step.description}
                </p>
              </div>
            </div>
          );
        })}
      </div>

      {/* Footer */}
      <div className="mt-6 pt-4 border-t border-gray-700">
        <p className="text-xs text-gray-400 text-center">
          {error && !retryCount ? (
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"
          ) : retryCount ? (
            `–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞... –û–±—ã—á–Ω–æ –ø—Ä–æ–±–ª–µ–º—ã —Ä–µ—à–∞—é—Ç—Å—è –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫.`
          ) : currentStepData?.status === 'current' ? (
            `–û–±—ã—á–Ω–æ ${currentStepData.name.toLowerCase()} –∑–∞–Ω–∏–º–∞–µ—Ç ${currentStepData.estimatedTime}`
          ) : (
            "–û–±—â–µ–µ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: 2-3 –º–∏–Ω—É—Ç—ã"
          )}
        </p>
      </div>
    </div>
  );
};

export default VideoCreationProgress;