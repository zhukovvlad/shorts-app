// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ä–µ—Ç—Ä–∞—è—Ö
const Redis = require('ioredis');

const redis = new Redis({
    host: process.env.UPSTASH_REDIS_HOST,
    port: process.env.UPSTASH_REDIS_PORT ? parseInt(process.env.UPSTASH_REDIS_PORT) : 6379,
    password: process.env.UPSTASH_REDIS_TOKEN || undefined,
    tls: {},
    maxRetriesPerRequest: null,
});

async function testRetryNotifications() {
    const testVideoId = 'test-retry-' + Date.now();
    const testUserId = 'test-user-123';
    
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ä–µ—Ç—Ä–∞—è—Ö...');
    console.log(`üìπ –¢–µ—Å—Ç–æ–≤—ã–π VideoId: ${testVideoId}`);
    
    try {
        // 1. –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        console.log('\n1Ô∏è‚É£ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ...');
        await redis.setex(`video_progress:${testVideoId}`, 3600, JSON.stringify({
            status: 'script',
            step: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è...',
            timestamp: Date.now(),
            userId: testUserId
        }));
        
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // 2. –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤
        console.log('\n2Ô∏è‚É£ –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤...');
        await redis.setex(`video_progress:${testVideoId}`, 3600, JSON.stringify({
            status: 'error',
            error: '–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –≤–Ω–µ—à–Ω–∏–º —Å–µ—Ä–≤–∏—Å–∞–º. –ü–æ–ø—ã—Ç–∫–∞ 1 –∏–∑ 3',
            lastError: 'TypeError: fetch failed - Connect Timeout Error (attempted address: api.assemblyai.com:443, timeout: 10000ms)',
            retryCount: 1,
            maxRetries: 3,
            timestamp: Date.now(),
            userId: testUserId
        }));
        
        await new Promise(resolve => setTimeout(resolve, 3000));
        
        // 3. –°–∏–º—É–ª–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å —Ä–µ—Ç—Ä–∞—è
        console.log('\n3Ô∏è‚É£ –°–∏–º—É–ª–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å —Ä–µ—Ç—Ä–∞—è...');
        await redis.setex(`video_progress:${testVideoId}`, 3600, JSON.stringify({
            status: 'retrying',
            step: '–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ 1/3 (—à–∞–≥: captions)...',
            retryCount: 1,
            maxRetries: 3,
            retryReason: '–í–æ–∑–Ω–∏–∫–ª–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ "captions", –ø—ã—Ç–∞–µ–º—Å—è —Å–Ω–æ–≤–∞',
            lastError: 'TypeError: fetch failed - Connect Timeout Error',
            currentStepId: 'captions', // –¢–æ—á–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫–æ–π —à–∞–≥ —Ä–µ—Ç—Ä–∞–∏—Ç—Å—è
            timestamp: Date.now(),
            userId: testUserId
        }));
        
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // 4. –°–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
        console.log('\n4Ô∏è‚É£ –°–∏–º—É–ª–∏—Ä—É–µ–º –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å–ª–µ —Ä–µ—Ç—Ä–∞—è...');
        await redis.setex(`video_progress:${testVideoId}`, 3600, JSON.stringify({
            status: 'captions',
            step: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤...',
            timestamp: Date.now(),
            userId: testUserId
        }));
        
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // 5. –ó–∞–≤–µ—Ä—à–∞–µ–º —É—Å–ø–µ—à–Ω–æ
        console.log('\n5Ô∏è‚É£ –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —É—Å–ø–µ—à–Ω–æ...');
        await redis.setex(`video_progress:${testVideoId}`, 3600, JSON.stringify({
            status: 'completed',
            timestamp: Date.now(),
            userId: testUserId
        }));
        
        console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ UI –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ä–µ—Ç—Ä–∞—è—Ö.');
        console.log(`üîó –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ VideoId: ${testVideoId}`);
        
        // –û—á–∏—â–∞–µ–º —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
        setTimeout(async () => {
            await redis.del(`video_progress:${testVideoId}`);
            console.log('üßπ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
            process.exit(0);
        }, 30000);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞:', error);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testRetryNotifications();