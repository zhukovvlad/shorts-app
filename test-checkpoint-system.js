// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ checkpoint —Å–∏—Å—Ç–µ–º—ã
const Redis = require('ioredis');

const redis = new Redis({
    host: process.env.TIMEWEB_REDIS_HOST,
    port: process.env.TIMEWEB_REDIS_PORT ? parseInt(process.env.TIMEWEB_REDIS_PORT) : 6379,
    username: process.env.TIMEWEB_REDIS_USERNAME || undefined,
    password: process.env.TIMEWEB_REDIS_PASSWORD || undefined,
    maxRetriesPerRequest: null,
});

async function demonstrateCheckpointSystem() {
    const testVideoId = 'test-checkpoint-' + Date.now();
    const testUserId = 'test-user-123';
    
    console.log('üß™ –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º checkpoint —Å–∏—Å—Ç–µ–º—É...');
    console.log(`üìπ –¢–µ—Å—Ç–æ–≤—ã–π VideoId: ${testVideoId}`);
    
    try {
        // 1. –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ checkpoint
        console.log('\n1Ô∏è‚É£ –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–Ω–µ—Ç checkpoint)');
        let checkpoint = await getVideoCheckpoint(testVideoId);
        console.log('Checkpoint:', checkpoint);
        console.log('–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:', getNextStep(checkpoint));
        
        // 2. –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–≥–æ–≤ —Å checkpoint'–∞–º–∏
        console.log('\n2Ô∏è‚É£ –í—ã–ø–æ–ª–Ω—è–µ–º —à–∞–≥–∏ —Å checkpoint\'–∞–º–∏...');
        
        // Script completed
        await markStepCompleted(testVideoId, testUserId, 'script');
        checkpoint = await getVideoCheckpoint(testVideoId);
        console.log('–ü–æ—Å–ª–µ script:', checkpoint.completedSteps);
        console.log('–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:', getNextStep(checkpoint));
        
        // Images completed
        await markStepCompleted(testVideoId, testUserId, 'images');
        checkpoint = await getVideoCheckpoint(testVideoId);
        console.log('–ü–æ—Å–ª–µ images:', checkpoint.completedSteps);
        console.log('–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:', getNextStep(checkpoint));
        
        // Audio completed
        await markStepCompleted(testVideoId, testUserId, 'audio');
        checkpoint = await getVideoCheckpoint(testVideoId);
        console.log('–ü–æ—Å–ª–µ audio:', checkpoint.completedSteps);
        console.log('–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:', getNextStep(checkpoint));
        
        // 3. –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –Ω–∞ captions
        console.log('\n3Ô∏è‚É£ –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –Ω–∞ —à–∞–≥–µ captions...');
        await markStepFailed(testVideoId, testUserId, 'captions');
        checkpoint = await getVideoCheckpoint(testVideoId);
        console.log('–ü–æ—Å–ª–µ –æ—à–∏–±–∫–∏ captions:', {
            completedSteps: checkpoint.completedSteps,
            lastFailedStep: checkpoint.lastFailedStep,
            nextStep: getNextStep(checkpoint)
        });
        
        // 4. –°–∏–º—É–ª–∏—Ä—É–µ–º retry - –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å captions
        console.log('\n4Ô∏è‚É£ Retry –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å captions (–ø—Ä–æ–ø—É—Å–∫–∞—è completed —à–∞–≥–∏)...');
        console.log('–ü—Ä–æ–ø—É—Å–∫–∞–µ–º: script ‚úÖ, images ‚úÖ, audio ‚úÖ');
        console.log('–ù–∞—á–∏–Ω–∞–µ–º —Å: captions (–ø–æ—Å–ª–µ–¥–Ω–∏–π failed —à–∞–≥)');
        
        // –ó–∞–≤–µ—Ä—à–∞–µ–º captions
        await markStepCompleted(testVideoId, testUserId, 'captions');
        checkpoint = await getVideoCheckpoint(testVideoId);
        console.log('–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ captions:', checkpoint.completedSteps);
        console.log('–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:', getNextStep(checkpoint));
        
        // –ó–∞–≤–µ—Ä—à–∞–µ–º render
        await markStepCompleted(testVideoId, testUserId, 'render');
        checkpoint = await getVideoCheckpoint(testVideoId);
        console.log('–ü–æ—Å–ª–µ render:', checkpoint.completedSteps);
        console.log('–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:', getNextStep(checkpoint));
        
        console.log('\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:');
        console.log('- –ü—Ä–∏ –æ—à–∏–±–∫–µ –Ω–∞ captions –Ω–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å script, images, audio');
        console.log('- Retry –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ç–æ—á–Ω–æ —Å –º–µ—Å—Ç–∞ –æ—à–∏–±–∫–∏');
        console.log('- –≠–∫–æ–Ω–æ–º–∏–º –≤—Ä–µ–º—è, —Ç–æ–∫–µ–Ω—ã AI –∏ –¥–µ–Ω—å–≥–∏');
        
        // –û—á–∏—â–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(async () => {
            await deleteVideoCheckpoint(testVideoId);
            console.log('üßπ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
            process.exit(0);
        }, 5000);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        process.exit(1);
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–∫–æ–ø–∏–∏ –∏–∑ redis.ts)
async function getVideoCheckpoint(videoId) {
    try {
        const key = `video_checkpoint:${videoId}`;
        const data = await redis.get(key);
        return data ? JSON.parse(data) : null;
    } catch (error) {
        console.error('Failed to get video checkpoint:', error);
        return null;
    }
}

async function setVideoCheckpoint(videoId, checkpoint) {
    try {
        const key = `video_checkpoint:${videoId}`;
        await redis.setex(key, 7200, JSON.stringify(checkpoint));
    } catch (error) {
        console.error('Failed to set video checkpoint:', error);
    }
}

async function markStepCompleted(videoId, userId, step) {
    try {
        const checkpoint = await getVideoCheckpoint(videoId) || {
            videoId,
            userId,
            completedSteps: {
                script: false,
                images: false,
                audio: false,
                captions: false,
                render: false
            },
            timestamp: Date.now()
        };

        if (step in checkpoint.completedSteps) {
            checkpoint.completedSteps[step] = true;
            checkpoint.lastCompletedStep = step;
            checkpoint.timestamp = Date.now();
            
            await setVideoCheckpoint(videoId, checkpoint);
            console.log(`‚úÖ Checkpoint: Step '${step}' completed`);
        }
    } catch (error) {
        console.error('Failed to mark step as completed:', error);
    }
}

async function markStepFailed(videoId, userId, step) {
    try {
        const checkpoint = await getVideoCheckpoint(videoId) || {
            videoId,
            userId,
            completedSteps: {
                script: false,
                images: false,
                audio: false,
                captions: false,
                render: false
            },
            timestamp: Date.now()
        };

        checkpoint.lastFailedStep = step;
        checkpoint.timestamp = Date.now();
        
        await setVideoCheckpoint(videoId, checkpoint);
        console.log(`‚ùå Checkpoint: Step '${step}' failed`);
    } catch (error) {
        console.error('Failed to mark step as failed:', error);
    }
}

function getNextStep(checkpoint) {
    if (!checkpoint) return 'script';
    
    const steps = ['script', 'images', 'audio', 'captions', 'render'];
    const completed = checkpoint.completedSteps;
    
    for (const step of steps) {
        if (!completed[step]) {
            return step;
        }
    }
    
    return 'completed';
}

async function deleteVideoCheckpoint(videoId) {
    try {
        const key = `video_checkpoint:${videoId}`;
        await redis.del(key);
    } catch (error) {
        console.error('Failed to delete video checkpoint:', error);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
demonstrateCheckpointSystem();